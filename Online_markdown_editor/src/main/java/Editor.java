import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.*;
import java.text.SimpleDateFormat;

/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */
public class Editor extends HttpServlet {


    /**
     * The Servlet constructor
     *
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */
    public Editor() {}

    public void init() throws ServletException {
        /*  write any servlet initialization code here or remove this function */
    }

    public void destroy() {
        /*  write any servlet cleanup code here or remove this function */
    }


    public boolean chkPostId(String postID, HttpServletResponse response) throws ServletException, IOException {

        try {
            int n = Integer.parseInt(postID);
            return true;
        } catch (NumberFormatException n) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return false;
        }
    }


    /**
     * Handles HTTP GET requests
     *
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     * HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // implement your GET method handling code here
        // currently we simply show the page generated by "edit.jsp"
        
        Connection c = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        String userName = request.getParameter("username");
        String postid = request.getParameter("postid");
        String action = request.getParameter("action");
        String title = request.getParameter("title");
        String body = request.getParameter("body");
        SimpleDateFormat curTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");


        if (action != null && action.compareTo("open") == 0) {

            if (userName == null || postid == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            int postId = 0;
            if (chkPostId(postid, response))
                postId = Integer.parseInt(postid);
            else
                return;

            if (postId < 0) {
                System.err.println("postid cannot be negative");
                return;
            }
            else if (postId > 0) {
                if (title == null || body == null) {
                    try {

                        c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");
                        ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
                        ps.setString(1, userName);
                        ps.setInt(2, postId);
                        rs = ps.executeQuery();

                        SQLWarning warn = ps.getWarnings();
                        if (warn != null) System.out.println("Message: " + warn.getMessage());
                        SQLWarning warning = rs.getWarnings();
                        if (warning != null) System.out.println("Message: " + warning.getMessage());

                        // (username, postid) row does not exist in a Posts table.
                        if (!rs.isBeforeFirst()) {
                            response.sendError(HttpServletResponse.SC_NOT_FOUND);
                            System.err.println("(username, postid) row does not exist in a Posts table.");
                            return;
                        }
                        else {
                            while (rs.next()) {
                                title = rs.getString("title");
                                body = rs.getString("body");
                            }

                            request.setAttribute("postid", postId);
                            request.setAttribute("title", title);
                            request.setAttribute("body", body);

                            response.setStatus(HttpServletResponse.SC_OK);

                            request.getRequestDispatcher("/edit.jsp").forward(request, response);

                            return;
                        }
                    } catch (SQLException ex) {
                        System.out.println("SQLException caught");
                        System.out.println("---");
                        while (ex != null) {
                            System.out.println("Message   : " + ex.getMessage());
                            System.out.println("SQLState  : " + ex.getSQLState());
                            System.out.println("ErrorCode : " + ex.getErrorCode());
                            System.out.println("---");
                            ex = ex.getNextException();
                        }
                    } finally {
                        try { rs.close(); } catch (Exception e) { /* ignored */ }
                        try { ps.close(); } catch (Exception e) { /* ignored */ }
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                    }
                }
            }
            if (title == null)
                request.setAttribute("title", "");
            else
                request.setAttribute("title", title);
            if (body == null)
                request.setAttribute("body", "");
            else
                request.setAttribute("body", body);
            response.setStatus(HttpServletResponse.SC_OK);
            request.getRequestDispatcher("/edit.jsp").forward(request, response);
            return;
        }
        else if (action != null && action.compareTo("preview") == 0) {

            if (userName == null || postid == null || title == null || body == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            Parser parser = Parser.builder().build();
            Node parsedTitle = parser.parse(title);
            Node parsedBody = parser.parse(body);
            HtmlRenderer renderer = HtmlRenderer.builder().build();
            String parsedRenderedTitle = renderer.render(parsedTitle);
            String parsedRenderedBody = renderer.render(parsedBody);

            request.setAttribute("parRenTitle", parsedRenderedTitle);
            request.setAttribute("parRenBody", parsedRenderedBody);
            response.setStatus(HttpServletResponse.SC_OK);
            request.getRequestDispatcher("/preview.jsp").forward(request, response);
            return;
        }
        else if (action != null && action.compareTo("list") == 0) {

            if (userName == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            try {
                c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");
                ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ?");
                ps.setString(1, userName);
                rs = ps.executeQuery();

                SQLWarning warn = ps.getWarnings();
                if (warn != null) System.out.println("Message: " + warn.getMessage());
                SQLWarning warning = rs.getWarnings();
                if (warning != null) System.out.println("Message: " + warning.getMessage());

                if (!rs.isBeforeFirst()) {
                    response.sendError(HttpServletResponse.SC_NOT_FOUND);
                    return;
                }

                request.setAttribute("username", userName);
                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/list.jsp").forward(request, response);
                return;
            } catch (SQLException ex) {
                System.out.println("SQLException caught");
                System.out.println("---");
                while (ex != null) {
                    System.out.println("Message   : " + ex.getMessage());
                    System.out.println("SQLState  : " + ex.getSQLState());
                    System.out.println("ErrorCode : " + ex.getErrorCode());
                    System.out.println("---");
                    ex = ex.getNextException();
                }
            } finally {
                try { rs.close(); } catch (Exception e) { /* ignored */ }
                try { ps.close(); } catch (Exception e) { /* ignored */ }
                try { c.close(); } catch (Exception e) { /* ignored */ }
            }
        }
        else if (action != null && action.compareTo("close") == 0) {

            if (userName == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            request.setAttribute("username", userName);
            request.getRequestDispatcher("/list.jsp").forward(request, response);
            return;
        }
        else if (action != null && (action.compareTo("save") == 0 || action.compareTo("delete") == 0)) {

            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
    }


    /**
     * Handles HTTP POST requests
     *
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     * HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // implement your POST method handling code here
        // currently we simply show the page generated by "edit.jsp"

        Connection c = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        String userName = request.getParameter("username");
        String postid = request.getParameter("postid");
        String action = request.getParameter("action");
        String title = request.getParameter("title");
        String body = request.getParameter("body");
        SimpleDateFormat curTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");


        if (action != null && action.compareTo("save") == 0) {

            if (userName == null || postid == null || title == null || body == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            int postId = 0;
            if (chkPostId(postid, response))
                postId = Integer.parseInt(postid);
            else
                return;
            Timestamp timestamp = new Timestamp((System.currentTimeMillis()));
            String currentTime = curTime.format(timestamp);


            if (postId < 0) {
                System.err.println("postid cannot be negative");
                return;
            }
            else if (postId == 0) {
                try {
                    c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");

                    ps = c.prepareStatement("SELECT MAX(postid) FROM Posts WHERE username = ?");
                    ps.setString(1, userName);
                    rs = ps.executeQuery();

                    SQLWarning warn = ps.getWarnings();
                    if (warn != null) System.out.println("Message: " + warn.getMessage());
                    SQLWarning warning = rs.getWarnings();
                    if (warning != null) System.out.println("Message: " + warning.getMessage());

                    // There is no post for user in a Posts table.
                    if (!rs.isBeforeFirst()) {
                        postId = 0;
                    }
                    else {
                        while (rs.next()) {
                            postId = rs.getInt("MAX(postid)");
                        }
                    }
                    postId += 1;

                    ps = c.prepareStatement("INSERT INTO Posts VALUES(?, ?, ?, ?, ?, ?);");
                    ps.setString(1, userName);
                    ps.setInt(2, postId);
                    ps.setString(3, title);
                    ps.setString(4, body);
                    ps.setString(5, currentTime);
                    ps.setString(6, currentTime);
                    ps.executeUpdate();
                    response.setStatus(HttpServletResponse.SC_OK);
                    request.getRequestDispatcher("/list.jsp").forward(request, response);
                    return;
                } catch (SQLException ex) {
                    System.out.println("SQLException caught");
                    System.out.println("---");
                    while (ex != null) {
                        System.out.println("Message   : " + ex.getMessage());
                        System.out.println("SQLState  : " + ex.getSQLState());
                        System.out.println("ErrorCode : " + ex.getErrorCode());
                        System.out.println("---");
                        ex = ex.getNextException();
                    }
                }  finally {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }
            }
            else {
                try {
                    c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");
                    ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
                    ps.setString(1, userName);
                    ps.setInt(2, postId);
                    rs = ps.executeQuery();

                    SQLWarning warn = ps.getWarnings();
                    if (warn != null) System.out.println("Message: " + warn.getMessage());
                    SQLWarning warning = rs.getWarnings();
                    if (warning != null) System.out.println("Message: " + warning.getMessage());

                    // (username, postid) row does not exist in a Posts table.
                    if (!rs.isBeforeFirst()) {
                        response.sendError(HttpServletResponse.SC_NOT_FOUND);
                        return;
                    } else {
                        ps = c.prepareStatement("UPDATE Posts SET title = ?, body = ?, modified = ? WHERE username = ? AND postid = ?");
                        ps.setString(1, title);
                        ps.setString(2, body);
                        ps.setString(3, currentTime);
                        ps.setString(4, userName);
                        ps.setInt(5, postId);
                        ps.executeUpdate();
                        response.setStatus(HttpServletResponse.SC_OK);
                        request.getRequestDispatcher("/list.jsp").forward(request, response);
                        return;
                    }
                } catch (SQLException ex) {
                    System.out.println("SQLException caught");
                    System.out.println("---");
                    while (ex != null) {
                        System.out.println("Message   : " + ex.getMessage());
                        System.out.println("SQLState  : " + ex.getSQLState());
                        System.out.println("ErrorCode : " + ex.getErrorCode());
                        System.out.println("---");
                        ex = ex.getNextException();
                    }
                } finally {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }
            }
        }
        else if (action != null && action.compareTo("delete") == 0) {

            if (userName == null || postid == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            int postId = 0;
            if (chkPostId(postid, response))
                postId = Integer.parseInt(postid);
            else
                return;

            try {
                c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");
                ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
                ps.setString(1, userName);
                ps.setInt(2, postId);
                rs = ps.executeQuery();

                SQLWarning warn = ps.getWarnings();
                if (warn != null) System.out.println("Message: " + warn.getMessage());
                SQLWarning warning = rs.getWarnings();
                if (warning != null) System.out.println("Message: " + warning.getMessage());

                // (username, postid) row does not exist in a Posts table.
                if (!rs.isBeforeFirst()) {
                    response.sendError(HttpServletResponse.SC_NOT_FOUND);
                    System.err.println("(username, postid) row does not exist in a Posts table.");
                    return;
                }
                else {
                    ps = c.prepareStatement("DELETE FROM Posts WHERE username = ? AND postid = ?");
                    ps.setString(1, userName);
                    ps.setInt(2, postId);
                    ps.executeUpdate();
                    request.setAttribute("username", userName);
                    response.setStatus(HttpServletResponse.SC_OK);
                    request.getRequestDispatcher("/list.jsp").forward(request, response);
                    return;
                }
            } catch (SQLException ex) {
                System.out.println("SQLException caught");
                System.out.println("---");
                while (ex != null) {
                    System.out.println("Message   : " + ex.getMessage());
                    System.out.println("SQLState  : " + ex.getSQLState());
                    System.out.println("ErrorCode : " + ex.getErrorCode());
                    System.out.println("---");
                    ex = ex.getNextException();
                }
            } finally {
                try { rs.close(); } catch (Exception e) { /* ignored */ }
                try { ps.close(); } catch (Exception e) { /* ignored */ }
                try { c.close(); } catch (Exception e) { /* ignored */ }
            }
        }
        else if (action != null && action.compareTo("list") == 0) {

            if (userName == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
            try {
                c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");
                ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ?");
                ps.setString(1, userName);
                rs = ps.executeQuery();

                SQLWarning warn = ps.getWarnings();
                if (warn != null) System.out.println("Message: " + warn.getMessage());
                SQLWarning warning = rs.getWarnings();
                if (warning != null) System.out.println("Message: " + warning.getMessage());

                if (!rs.isBeforeFirst()) {
                    response.sendError(HttpServletResponse.SC_NOT_FOUND);
                    return;
                }

                request.setAttribute("username", userName);
                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/list.jsp").forward(request, response);
                return;
            } catch (SQLException ex) {
                System.out.println("SQLException caught");
                System.out.println("---");
                while (ex != null) {
                    System.out.println("Message   : " + ex.getMessage());
                    System.out.println("SQLState  : " + ex.getSQLState());
                    System.out.println("ErrorCode : " + ex.getErrorCode());
                    System.out.println("---");
                    ex = ex.getNextException();
                }
            } finally {
                try { rs.close(); } catch (Exception e) { /* ignored */ }
                try { ps.close(); } catch (Exception e) { /* ignored */ }
                try { c.close(); } catch (Exception e) { /* ignored */ }
            }
        }
        else if (action != null && action.compareTo("preview") == 0) {

            if (userName == null || postid == null || title == null || body == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            int postId = 0;
            if (chkPostId(postid, response))
                postId = Integer.parseInt(postid);
            else
                return;

            Parser parser = Parser.builder().build();
            Node parsedTitle = parser.parse(title);
            Node parsedBody = parser.parse(body);
            HtmlRenderer renderer = HtmlRenderer.builder().build();
            String parsedRenderedTitle = renderer.render(parsedTitle);
            String parsedRenderedBody = renderer.render(parsedBody);

            request.setAttribute("parRenTitle", parsedRenderedTitle);
            request.setAttribute("parRenBody", parsedRenderedBody);
            response.setStatus(HttpServletResponse.SC_OK);
            request.getRequestDispatcher("/preview.jsp").forward(request, response);
            return;
        }
        else if (action != null && action.compareTo("open") == 0) {

            if (userName == null || postid == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }

            int postId = 0;
            if (chkPostId(postid, response))
                postId = Integer.parseInt(postid);
            else
                return;

            if (postId < 0) {
                System.err.println("postid cannot be negative");
                return;
            }
            else if (postId > 0) {
                if (title == null || body == null) {
                    // If(username, postid) row exists in the DB, retrieve the title and body from the DB.
                    try {
                        c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");
                        ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
                        ps.setString(1, userName);
                        ps.setInt(2, postId);
                        rs = ps.executeQuery();

                        SQLWarning warn = ps.getWarnings();
                        if (warn != null) System.out.println("Message: " + warn.getMessage());
                        SQLWarning warning = rs.getWarnings();
                        if (warning != null) System.out.println("Message: " + warning.getMessage());

                        // (username, postid) row does not exist in a Posts table.
                        if (!rs.isBeforeFirst()) {
                            response.sendError(HttpServletResponse.SC_NOT_FOUND);
                            System.err.println("(username, postid) row does not exist in a Posts table.");
                            return;
                        }
                        else {
                            while (rs.next()) {
                                title = rs.getString("title");
                                body = rs.getString("body");
                            }

                            request.setAttribute("postid", postId);
                            request.setAttribute("title", title);
                            request.setAttribute("body", body);

                            response.setStatus(HttpServletResponse.SC_OK);
                            request.getRequestDispatcher("/edit.jsp").forward(request, response);
                            return;
                        }
                    } catch (SQLException ex) {
                        System.out.println("SQLException caught");
                        System.out.println("---");
                        while (ex != null) {
                            System.out.println("Message   : " + ex.getMessage());
                            System.out.println("SQLState  : " + ex.getSQLState());
                            System.out.println("ErrorCode : " + ex.getErrorCode());
                            System.out.println("---");
                            ex = ex.getNextException();
                        }
                    } finally {
                        try { rs.close(); } catch (Exception e) { /* ignored */ }
                        try { ps.close(); } catch (Exception e) { /* ignored */ }
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                    }
                }
            }
            if (title == null)
                request.setAttribute("title", "");
            else
                request.setAttribute("title", title);
            if (body == null)
                request.setAttribute("body", "");
            else
                request.setAttribute("body", body);
            response.setStatus(HttpServletResponse.SC_OK);
            request.getRequestDispatcher("/edit.jsp").forward(request, response);
            return;
        }
    }
}